//Input
//Tex, Resolution
//CIrcleSize = Intensity * 0.6
//Loop = 71
//alpha = 5
//iTime


#define MAX_RADIUS 2
#define DOUBLE_HASH 0

	static const int SceneTextureIndex = 14;
	
	float resolution = 10. * CIrcleSize * exp2(-3. * 0.8f);
	float2 uv = GetDefaultSceneTextureUV(Parameters, SceneTextureIndex)*resolution;
	float2 p0 = floor(uv);
	
	float2 circles = float2(0.f, 0.f);
	for(int j = - MAX_RADIUS; j <= MAX_RADIUS; ++j)
	{
		for(int i = -MAX_RADIUS; i < MAX_RADIUS; ++i)
		{
			float2 pi = p0 + float2(i, j);
			//#if DOUBLE_HASH
			float2 hsh = hash22(pi);
			//#else
			//float2 hsh = pi;
			//#endif
			float2 p = pi + hash22(hsh);
			
			float t = frac(0.3*iTime + hash12(hsh));
			float v = p - uv;
			float d = length(v) - float(MAX_RADIUS) + 1.)*t;
			
			float h = 1e - 3;
			float d1 = d - h;
			float d2 = d + h;
			float p1 = sin(31. * d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);
			float p2 = sin(31. * d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);
			circles += 0.5 * normalize(v) * ((p2 - p1) / (2. * h) * (1. - t) * (1. - t));
		}
	}
	circles /= float((MAX_RADIUS*2 + 1) * (MAX_RADIUS*2 + 1);
	
	float intensity = lerp(0.01, 0.15, smoothstep(0.1, 0.6, abs(frac(0.05*iTime + 0.5)*2.-1.)));
	float3 n = float3(circles, sqrt(1. - dot(circles, circles)));
	float3 color = SceneTextureLookup(uv/resolution - intensity*n.xy, SceneTextureIndex, false).rgb + alpha*pow(clamp(dot(n,normalize(float3(1.,0.7,0.5))),0.,1.),6.);
	return float4(color, 1.0);
	
	return 1;
}

float hash12(float2 p)
{
#define HASHSCALE1 .1031
	float3 p3 = frac(float3(p.xyz) * HASHSCALE1);
	p3 += dot(p3, p3.yzx + 19.19);
	return frac((p3.x +p3.y) * p3.z);
}
float2 hash22(float2 p)
{
#define HASHSCALE3 float3(.1031, .1030, .0972)
	float3 p3 = frac(float3(p.xyz) * HASHSCALE3);
	p3 += dot(p3, p3.yzx + 19.19);
	return frac((p3.xx + p3.yz)*p3.zy);